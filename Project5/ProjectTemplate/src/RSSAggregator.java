import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Michael Terranova
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    	}
    

   
    
    /**
    * Outputs HTML file with list of available RSS feeds
    *
    *@param x
    * 	XML tree
    * @param out
    *   output stream
    * @param outFile
    *   output stream to file
    * @param S
    *   filename 
    */
    
    private static void docHeader(XMLTree x, SimpleWriter out, SimpleWriter outFile, String S){

    	 outFile.println("<html>");
         outFile.println("<head>");
         outFile.println("<title>");
         outFile.println(x.attributeValue("title"));
         outFile.println("</title>");
         outFile.println("</head>");
         outFile.println("<body>");
         outFile.println("<h1>");
         outFile.println(x.attributeValue("title"));
         outFile.println("</h1>");
         outFile.println("<p>");
         outFile.println("<u1>");
         int i = 0;
         while (i < x.numberOfChildren()) {
             outFile.println("<li>");
             processFeed(x.child(i).attributeValue("url"),
                     x.child(i).attributeValue("file"), out);
             outFile.print("<a href=\"");
             outFile.print(x.child(i).attributeValue("file"));
             outFile.print("\">");
             outFile.print(x.child(i).attributeValue("name"));
             outFile.print("</a>");
             outFile.println("</li>");
             i++;
         }
         outFile.println("</p>");
         outFile.println("</body>");
         outFile.println("</html>");
         out.println(S + " created");
         outFile.close();
         out.close();
    }
    
    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page
     * title</title> </head> <body>
     * <h1>the page title inside a link to the <channel> link
     * <h1>
     * <p>
     * the channel description
     * </p>
     * <table>
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");
        out.print("<title>");

        int index = getChildElement(channel, "title");
        if (index != -1) {
            if (channel.child(index).numberOfChildren() != 0) {
                out.print(channel.child(index).child(0).label());
            } else {
                out.println("No Title Available");
            }
        }

        out.println("</title>");
        out.println("</head>");
        out.println("<body>");
        
        
        
        out.println("<h1 style=\"font-size:200%\">");
        int index1 = getChildElement(channel, "link");
        out.print("<a href=\"");
        out.print(channel.child(index1).child(0).label());
        out.print("\">");
        out.print(channel.child(index).child(0).label());
        out.print("</a>");
        out.println("</h1>");

      
        index = getChildElement(channel, "description");
        if (index != -1) {
            if (channel.child(index).numberOfChildren() != 0) {
                out.print(channel.child(index).child(0).label());
            } else {
                out.println("No description availabe");
            }
        }
        out.println("</p>");

        out.println("<table border=\"2\">");
		out.println("<tr>");
		out.println("<th>Date</th>");
		out.println("<th>Source</th>");
		out.println("<th>News</th>");
		out.println("</tr>");

       
        int k = 0;
        while (k < channel.numberOfChildren()) {
            String realTag = channel.child(k).label();
            if (realTag.equals("item")) {
                XMLTree item = channel.child(k);
                processItem(item, out);
            }
            k++;
        }

        outputFooter(out);

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures
     *
     *          <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     *          </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int n = 0;
        int tagIndex = -1;
        while (n < xml.numberOfChildren()) {
            String realTag = xml.child(n).label();
            if (tag.equals(realTag)) {
                tagIndex = n;
            }
            n++;
        }
        return tagIndex;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires
     *
     *           <pre>
     * [the label of the root of item is an <item> tag] and out.is_open
     *           </pre>
     *
     * @ensures
     *
     *          <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     *          </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");
        out.print("<th>");
        int index = getChildElement(item, "pubDate");
        if (index != -1) {
            out.println(item.child(index).child(0).label());
        } else {
            out.println("No date available");
        }
        out.println("</th>");

        out.print("<th>");
        index = getChildElement(item, "source");
        if (index != -1) {
            out.print("<a href=\"" + item.child(index).attributeValue("url")
                    + "\">" + item.child(index).child(0).label() + "</a>");
        } 
        else {
            out.println("No source available");
        }
        out.println("</th>");

       
        out.print("<th>");
        int indexLink = getChildElement(item, "link");
        String nameLink = item.child(indexLink).child(0).label();
        index = getChildElement(item, "title");
        if (index != -1) {
            out.print("<a href=\"" + nameLink + "\">"
                    + item.child(index).child(0).label() + "</a>");
        } 
        else
        {
            out.println("No title available");
        }
        out.println("</th>");

    }

    /**
     * Ask a user the URL of RSS 2.0 feed and the name of output file. output
     * file should be formatted as .html. declare new outFile to open htmlFile.
     * Call a outputHeader method to put values into htmlFile.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Enter an xml doc with a list of of RSS 2.0 feeds: ");
        XMLTree xml = new XMLTree1(in.nextLine());

        out.println("Name the file");
        String outputName = in.nextLine() + ".html";
        SimpleWriter outFile = new SimpleWriter1L(outputName);

      docHeader(xml, out, outFile, outputName);
    }
    
    
    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     * 
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
    */
    
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);
        XMLTree channel = xml.child(0);
        SimpleWriter outfile = new SimpleWriter1L(file);
        outputHeader(channel, outfile);
        outfile.close();
    }

    }

